name: sample-products-ci-workflow

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        type: string
        default: 'debug'
      working_directory:
        type: string
        description: 'Directory for execute de CI Workflow'     
        required: true
        default: 'build'
    
    
  push:
    branches:
      - main
    

env:
  # npm registry
  NPM_REGISTRY_FQDN: npm.pkg.github.com
  # node version
  NODE_VERSION: '18.x'
  # Development Registry
  GITHUB_REGISTRY: 'ghcr.io'
  # github.repository as <account>/<repo>
  IMAGE_NAME: 'cypresslab'

jobs:

  ra_version:
    name: "Generate versions from common workflow"
    uses: ./.github/workflows/raver.yml
  sample-webapp-CI-job:
    runs-on: ubuntu-latest
    environment: sandbox
    needs: ra_version
    
    steps:
  
    - name: 'Checkout Source Code'                                                                                                                                                                             
      uses: actions/checkout@v3

    - name: Cypress install
      uses: cypress-io/github-action@v6
      with:
        runTests: false
      # report machine parameters
    - run: yarn cypress info
    - run: node --version
    - run: node -p 'os.cpus()'
    - run: yarn types
    - run: yarn lint
    - run: yarn test:unit:ci
    - run: yarn build:ci
    
    #- name: Zip artifact for deployment
      #working-directory: .
      #run: zip -r ${{ needs.ra_version.outputs.version }}.zip * .funcignore

    #- name: Save build folder
      #uses: actions/upload-artifact@v4
      #with:
        #name: ${{ needs.ra_version.outputs.version }}
        #path: ${{ needs.ra_version.outputs.version }}.zip
        #if-no-files-found: error
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
        
  

    - name: Login to ${{ vars.ACR_SERVER }}
      uses: docker/login-action@v2
      with:
        registry: ${{ vars.ACR_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Extract Docker metadata for several artifacts
      id: meta
      uses: docker/metadata-action@v4.3.0
      with:
        images: |
          name=${{ vars.ACR_PROD_SERVER }}/${{ env.IMAGE_NAME_REDUCED }},enable=${{ github.event_name == 'push' && github.ref_name == 'main' }}
        flavor: |
          latest=false
        tags: |
          type=raw,value=${{ needs.ra_version.outputs.version }}
    
    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v4.0.0
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        